{
    "openapi": "3.1.0",
    "info": {
        "title": "Catalogix API",
        "description": "\n\u003Cbr\u003E API documentation for Catalogix services. \u003Cbr\u003E\n**Base URL:** `https://api.catalogix.ai` \u003Cbr\u003E\nUse this base URL to access all API endpoints.\n\n# Introduction\nOur suite of headless APIs enable end to end management of your fashion store. If you have any questions, please do not hesitate to contact us at support@catalogix.ai\n\n# Getting Started\n\nIn Catalogix Headless Platform, your company or organization is treated as a Workspace. Within the workspace, a store is defined as a channel for selling your products. Stores can be an eCommerce website in a specific country, a mobile app, a printed catalog, a chatbot, a 3rd party marketplace, or even physical retail locations. \n\nOnce you share your store's product feed or product images with Catalogix via our Feed API or using a CSV/XML file, we process your catalog and enable our APIs and services for your store.\n\n# Authentication\n\n\u003C!-- ReDoc-Inject: \u003Csecurity-definitions\u003E --\u003E\n\nCatalogix's REST APIs use the API Key to authenticate and authorize calls. Follow the steps listed here to get started.\n\n\u003Ch3\u003E Step 1: Registering your store and getting API Key \u003C/h3\u003E\n\nCatalogix will register your store and provide you a API Key. Please reach out to support@catalogix.ai to get started.\n\n    \n\u003Cbr/\u003E\n\n\u003Ch3\u003E Step 2: Calling an API \u003C/h3\u003E\nYou can call any API included in your subscription using the generated API Key.\n\nPass the API Key in the header as follows:\n\napikey: {token}\n\n\u003Ch4\u003EYou can use the same API Key for all APIs.\u003C/h4\u003E\n\n# Errors\nCatalogix Platform uses HTTP status codes to indicate success or failure of an API call. In general, status codes in the 2xx range means success, 4xx range means there was an error in the provided information, and those in the 5xx range indicate server side errors. Commonly used HTTP status codes are listed below.\n\n|Status Code | Description  |\n|--|--|\n| `200` | **Success**: The request was successfully completed. |\n| `201` | **Created**: The request was a success and one or more resources have been created. |\n| `400` | **Bad request**: The request cannot be performed. Usually because of malformed parameter or missing parameter. |\n| `401` | **Unauthorized (Invalid AuthToken)**: Request was rejected because of invalid API Key |\n| `404` | **Resource Not Found**: The URL youʼve sent is wrong. Itʼs possible that the resource youʼve requested has been moved to another URL. |\n| `405` |**Method Not Found**: The HTTP method that the API is calling with is not supported for this API. |\n| `413` |**Payload too large**: The API accepts upto 100 data items at a time. |\n| `422` |**validation Error**: It failed validation. Please refer to the data format given in the description of each API |\n| `429` | **Too many requests**: Too many requests within a certain time frame. To know more about api call limits, click here. |\n| `500` | **Server error**: Catalogix Platform server encountered an error which prevents it from fulfilling the request. Although this rarely happens, we recommend you to contact us at support@catalogix.ai if you receive this error. |\n\nFor details about the structure and application-specific error-codes of a specific Catalogix service, consult the documentation dedicated to that service.\n\n# Product Information\n\n\u003Ch3\u003EWhat is a Product? \u003C/h3\u003E\n\u003Cp\u003EA product is a uniquely identified item in a store catalog which can be sold to customers. A product typically contains information such as an identifier (eg: SKU, Style Code, GTIN), a title, a description, images, brand name, price, sale price, and other such attributes.  \u003C/p\u003E\n\n\u003Ch3\u003EWhere can it be implemented? \u003C/h3\u003E\n\u003Cp\u003EThe APIs shown in the section below help you to create new products in the Catalogix platform, modify existing product information, and fetch product information which can be used in many ways such as populating the content of a Product Details Page.  \u003C/p\u003E\n",
        "contact": {
            "name": "Catalogix Support",
            "email": "support@catalogix.ai"
        },
        "license": {
            "name": "Catalogix License"
        },
        "version": "1.0.0"
    },
    "servers": [{
            "url": "https://api.catalogix.ai/v1",
            "description": "Catalogix APIs"
        }
    ],
    "paths": {
        "/products": {
            "post": {
                "tags": [
                    "Product APIs"
                ],
                "summary": "Create Product",
                "description": "Inserts new product data into the system.",
                "operationId": "insert_data_products_post",
                "parameters": [{
                        "name": "store_uuid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Store Uuid"
                        },
                        "example": "67762d4ce590324df813bd8c"
                    }, {
                        "name": "apikey",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Apikey"
                        },
                        "example": "Api key"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/SkuDataModel"
                                },
                                "title": "Data"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Insert successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InsertDataResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid data format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Payload too large",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Mapping profile not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [
                    {
                        "lang": "cURL",
                        "label": "cUrl",
                        "source": "curl --location --request POST 'https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c' \\\n--header 'apikey: apikey' \\\n--header 'Content-Type: application/json' \\\n--data-raw '[\n  {\n    \"product_code\": \"CI001\",\n    \"parent_code\": \"SC001\",\n    \"Product Name\": \"Blue shirts\",\n    \"Department\": \"Men\",\n    \"Category\": \"Dupatta\",\n    \"Selling Price\": \"1000\",\n    \"Currency\": \"INR\",\n    \"Image URL 1\": \"https://assets-test.catalogix.ai/dee9c181338099b931cde78787df567a\",\n    \"Image URL 2\": \"https://assets-test.catalogix.ai/b9e0a674584b15df799a2d2a7bcb6f57\",\n    \"Image URL 3\": \"https://assets-test.catalogix.ai/3d8f430ce3bc623e8037aac988a889c6\",\n    \"Image URL 4\": \"https://assets-test.catalogix.ai/e263183310aa0093381bf48a6d8540aa\",\n    \"Image URL 5\": \"https://assets-test.catalogix.ai/38d253f0fb7aad878ae270e2c612467a\",\n    \"Image URL 6\": \"https://assets-test.catalogix.ai/5733be608a3f9303af5d7dd14621d2d1\"\n  }\n]'"
                    },
                    {
                        "lang": "Python",
                        "label": "Python",
                        "source": "import requests\nimport json\n\nurl = \"https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c\"\n\npayload = json.dumps([\n  {\n    \"product_code\": \"CI001\",\n    \"parent_code\": \"SC001\",\n    \"Product Name\": \"Blue shirts\",\n    \"Department\": \"Men\",\n    \"Category\": \"Dupatta\",\n    \"Selling Price\": \"1000\",\n    \"Currency\": \"INR\",\n    \"Image URL 1\": \"https://assets-test.catalogix.ai/dee9c181338099b931cde78787df567a\",\n    \"Image URL 2\": \"https://assets-test.catalogix.ai/b9e0a674584b15df799a2d2a7bcb6f57\",\n    \"Image URL 3\": \"https://assets-test.catalogix.ai/3d8f430ce3bc623e8037aac988a889c6\",\n    \"Image URL 4\": \"https://assets-test.catalogix.ai/e263183310aa0093381bf48a6d8540aa\",\n    \"Image URL 5\": \"https://assets-test.catalogix.ai/38d253f0fb7aad878ae270e2c612467a\",\n    \"Image URL 6\": \"https://assets-test.catalogix.ai/5733be608a3f9303af5d7dd14621d2d1\"\n  }\n])\nheaders = {\n  'apikey': 'apikey',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
                    },
                    {
                        "lang": "JavaScript",
                        "label": "JavaScript",
                        "source": "var myHeaders = new Headers();\nmyHeaders.append(\"apikey\", \"apikey\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\n\nvar raw = JSON.stringify([\n  {\n    \"product_code\": \"CI001\",\n    \"parent_code\": \"SC001\",\n    \"Product Name\": \"Blue shirts\",\n    \"Department\": \"Men\",\n    \"Category\": \"Dupatta\",\n    \"Selling Price\": \"1000\",\n    \"Currency\": \"INR\",\n    \"Image URL 1\": \"https://assets-test.catalogix.ai/dee9c181338099b931cde78787df567a\",\n    \"Image URL 2\": \"https://assets-test.catalogix.ai/b9e0a674584b15df799a2d2a7bcb6f57\",\n    \"Image URL 3\": \"https://assets-test.catalogix.ai/3d8f430ce3bc623e8037aac988a889c6\",\n    \"Image URL 4\": \"https://assets-test.catalogix.ai/e263183310aa0093381bf48a6d8540aa\",\n    \"Image URL 5\": \"https://assets-test.catalogix.ai/38d253f0fb7aad878ae270e2c612467a\",\n    \"Image URL 6\": \"https://assets-test.catalogix.ai/5733be608a3f9303af5d7dd14621d2d1\"\n  }\n]);\n\nvar requestOptions = {\n  method: 'POST',\n  headers: myHeaders,\n  body: raw,\n  redirect: 'follow'\n};\n\nfetch(\"https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
                    },
                    {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'[\n  {\n    \"product_code\": \"CI001\",\n    \"parent_code\": \"SC001\",\n    \"Product Name\": \"Blue shirts\",\n    \"Department\": \"Men\",\n    \"Category\": \"Dupatta\",\n    \"Selling Price\": \"1000\",\n    \"Currency\": \"INR\",\n    \"Image URL 1\": \"https://assets-test.catalogix.ai/dee9c181338099b931cde78787df567a\",\n    \"Image URL 2\": \"https://assets-test.catalogix.ai/b9e0a674584b15df799a2d2a7bcb6f57\",\n    \"Image URL 3\": \"https://assets-test.catalogix.ai/3d8f430ce3bc623e8037aac988a889c6\",\n    \"Image URL 4\": \"https://assets-test.catalogix.ai/e263183310aa0093381bf48a6d8540aa\",\n    \"Image URL 5\": \"https://assets-test.catalogix.ai/38d253f0fb7aad878ae270e2c612467a\",\n    \"Image URL 6\": \"https://assets-test.catalogix.ai/5733be608a3f9303af5d7dd14621d2d1\"\n  }\n]',\n  CURLOPT_HTTPHEADER => array(\n    'apikey: apikey',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
                    },
                    {
                        "lang": "Go",
                        "label": "Go",
                        "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`[\n  {\n    \"product_code\": \"CI001\",\n    \"parent_code\": \"SC001\",\n    \"Product Name\": \"Blue shirts\",\n    \"Department\": \"Men\",\n    \"Category\": \"Dupatta\",\n    \"Selling Price\": \"1000\",\n    \"Currency\": \"INR\",\n    \"Image URL 1\": \"https://assets-test.catalogix.ai/dee9c181338099b931cde78787df567a\",\n    \"Image URL 2\": \"https://assets-test.catalogix.ai/b9e0a674584b15df799a2d2a7bcb6f57\",\n    \"Image URL 3\": \"https://assets-test.catalogix.ai/3d8f430ce3bc623e8037aac988a889c6\",\n    \"Image URL 4\": \"https://assets-test.catalogix.ai/e263183310aa0093381bf48a6d8540aa\",\n    \"Image URL 5\": \"https://assets-test.catalogix.ai/38d253f0fb7aad878ae270e2c612467a\",\n    \"Image URL 6\": \"https://assets-test.catalogix.ai/5733be608a3f9303af5d7dd14621d2d1\"\n  }\n]`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"apikey\", \"apikey\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}"
                    },
                    {
                        "lang": "Java",
                        "label": "Java",
                        "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c\")\n  .header(\"apikey\", \"apikey\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"[\\n  {\\n    \\\"product_code\\\": \\\"CI001\\\",\\n    \\\"parent_code\\\": \\\"SC001\\\",\\n    \\\"Product Name\\\": \\\"Blue shirts\\\",\\n    \\\"Department\\\": \\\"Men\\\",\\n    \\\"Category\\\": \\\"Dupatta\\\",\\n    \\\"Selling Price\\\": \\\"1000\\\",\\n    \\\"Currency\\\": \\\"INR\\\",\\n    \\\"Image URL 1\\\": \\\"https://assets-test.catalogix.ai/dee9c181338099b931cde78787df567a\\\",\\n    \\\"Image URL 2\\\": \\\"https://assets-test.catalogix.ai/b9e0a674584b15df799a2d2a7bcb6f57\\\",\\n    \\\"Image URL 3\\\": \\\"https://assets-test.catalogix.ai/3d8f430ce3bc623e8037aac988a889c6\\\",\\n    \\\"Image URL 4\\\": \\\"https://assets-test.catalogix.ai/e263183310aa0093381bf48a6d8540aa\\\",\\n    \\\"Image URL 5\\\": \\\"https://assets-test.catalogix.ai/38d253f0fb7aad878ae270e2c612467a\\\",\\n    \\\"Image URL 6\\\": \\\"https://assets-test.catalogix.ai/5733be608a3f9303af5d7dd14621d2d1\\\"\\n  }\\n]\")\n  .asString();\n"
                    }
                ]
            },
            "put": {
                "tags": [
                    "Product APIs"
                ],
                "summary": "Update Product",
                "description": "Updates existing product data.",
                "operationId": "update_data_products_put",
                "parameters": [{
                        "name": "store_uuid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Store Uuid"
                        },
                        "example": "67762d4ce590324df813bd8c"
                    }, {
                        "name": "apikey",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Apikey"
                        },
                        "example": "Api key"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/UpdateSkuDataModel"
                                },
                                "title": "Data"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateDataResponse"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid data format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "413": {
                        "description": "Payload too large",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Mapping profile not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [{
                        "lang": "cURL",
                        "label": "cUrl",
                        "source": "curl --location --request PUT 'https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c' \\\n--header 'apikey: apikey' \\\n--header 'Content-Type: application/json' \\\n--data-raw '[\n  {\n    \"product_code\": \"CI001\",\n    \"Category\": \"Shirts\",\n    \"Department\": \"Men\",\n    \"Status\": \"inactive\"\n  }\n]'"
                    }, {
                        "lang": "Python",
                        "label": "Python",
                        "source": "import requests\nimport json\n\nurl = \"https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c\"\n\npayload = json.dumps([\n  {\n    \"product_code\": \"CI001\",\n    \"Category\": \"Shirts\",\n    \"Department\": \"Men\",\n    \"Status\": \"inactive\"\n  }\n])\nheaders = {\n  'apikey': 'apikey',\n  'Content-Type': 'application/json'\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
                    }, {
                        "lang": "JavaScript",
                        "label": "JavaScript",
                        "source": "var myHeaders = new Headers();\nmyHeaders.append(\"apikey\", \"apikey\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\n\nvar raw = JSON.stringify([\n  {\n    \"product_code\": \"CI001\",\n    \"Category\": \"Shirts\",\n    \"Department\": \"Men\",\n    \"Status\": \"inactive\"\n  }\n]);\n\nvar requestOptions = {\n  method: 'PUT',\n  headers: myHeaders,\n  body: raw,\n  redirect: 'follow'\n};\n\nfetch(\"https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
                    }, {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PUT',\n  CURLOPT_POSTFIELDS =>'[\n  {\n    \"product_code\": \"CI001\",\n    \"Category\": \"Shirts\",\n    \"Department\": \"Men\",\n    \"Status\": \"inactive\"\n  }\n]',\n  CURLOPT_HTTPHEADER => array(\n    'apikey: apikey',\n    'Content-Type: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
                    }, {
                        "lang": "Go",
                        "label": "Go",
                        "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c\"\n  method := \"PUT\"\n\n  payload := strings.NewReader(`[\n  {\n    \"product_code\": \"CI001\",\n    \"Category\": \"Shirts\",\n    \"Department\": \"Men\",\n    \"Status\": \"inactive\"\n  }\n]`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"apikey\", \"apikey\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}"
                    }, {
                        "lang": "Java",
                        "label": "Java",
                        "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.put(\"https://api.catalogix.ai/v1/products?store_uuid=67762d4ce590324df813bd8c\")\n  .header(\"apikey\", \"apikey\")\n  .header(\"Content-Type\", \"application/json\")\n  .body(\"[\\n  {\\n    \\\"product_code\\\": \\\"CI001\\\",\\n    \\\"Category\\\": \\\"Shirts\\\",\\n    \\\"Department\\\": \\\"Men\\\",\\n    \\\"Status\\\": \\\"inactive\\\"\\n  }\\n]\")\n  .asString();\n"
                    }
                ]
            },
            "get": {
                "tags": [
                    "Product APIs"
                ],
                "summary": "Retrieve Product",
                "description": "Retrieves product data.",
                "operationId": "retrieve_product_data_products_get",
                "parameters": [{
                        "name": "store_uuid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Store Uuid",
                            "example": "67762d4ce590324df813bd8c"
                        }
                    }, {
                        "name": "sku_codes",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of SKU Codes or Style codes based on selected type to be retrieved",
                            "title": "Sku Codes",
                            "example": "CI001"
                        }
                    }, {
                        "name": "apikey",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Apikey",
                            "example": "API key"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data retrieval successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetrieveDataResponse"
                                },
                                "example": {
                                    "status": {
                                        "code": 0,
                                        "message": "success"
                                    },
                                    "data": {
                                        "store_uuid": "67762d4ce590324df813bd8c",
                                        "data": [{
                                                "CI001": {
                                                    "Category": "shirts",
                                                    "product_code": "CI001",
                                                    "status": "active"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid data format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Data not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [{
                        "lang": "cURL",
                        "label": "cUrl",
                        "source": "curl --location --request GET 'https://api.catalogix.ai/v1/products?sku_codes=CI001&store_uuid=67762d4ce590324df813bd8c' \\\n--header 'apikey: apikey'"
                    }, {
                        "lang": "Python",
                        "label": "Python",
                        "source": "import requests\n\nurl = \"https://api.catalogix.ai/v1/products?sku_codes=CI001&store_uuid=67762d4ce590324df813bd8c\"\n\nheaders = {\n  'apikey': 'apikey'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers)\n\nprint(response.text)\n"
                    }, {
                        "lang": "JavaScript",
                        "label": "JavaScript",
                        "source": "var myHeaders = new Headers();\nmyHeaders.append(\"apikey\", \"apikey\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://api.catalogix.ai/v1/products?sku_codes=CI001&store_uuid=67762d4ce590324df813bd8c\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
                    }, {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://api.catalogix.ai/v1/products?sku_codes=CI001&store_uuid=67762d4ce590324df813bd8c',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'apikey: apikey'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
                    }, {
                        "lang": "Go",
                        "label": "Go",
                        "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.catalogix.ai/v1/products?sku_codes=CI001&store_uuid=67762d4ce590324df813bd8c\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"apikey\", \"apikey\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}"
                    }, {
                        "lang": "Java",
                        "label": "Java",
                        "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"https://api.catalogix.ai/v1/products?sku_codes=CI001&store_uuid=67762d4ce590324df813bd8c\")\n  .header(\"apikey\", \"apikey\")\n  .asString();\n"
                    }
                ]
            }
        },
        "/products/status": {
            "get": {
                "tags": [
                    "Product APIs"
                ],
                "summary": "Retrieve Product based on Status",
                "description": "Retrieves product data based on status.",
                "operationId": "retrieve_data_on_status_products_status_get",
                "parameters": [{
                        "name": "store_uuid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Store Uuid",
                            "example": "67762d4ce590324df813bd8c"
                        }
                    }, {
                        "name": "status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "enum": [
                                "new",
                                "active",
                                "problem",
                                "inactive",
                                "draft",
                                "under review"
                            ],
                            "type": "string",
                            "default": "active",
                            "title": "Status",
                            "example": "active"
                        }
                    }, {
                        "name": "offset",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0,
                            "default": 0,
                            "title": "Offset",
                            "example": 0
                        }
                    }, {
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "exclusiveMinimum": 0,
                            "default": 100,
                            "title": "Limit",
                            "example": 100
                        }
                    }, {
                        "name": "apikey",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Apikey",
                            "example": "api key"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data retrieval successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetrieveDataResponse"
                                },
                                "example": {
                                    "status": {
                                        "code": 0,
                                        "message": "success"
                                    },
                                    "data": {
                                        "store_uuid": "67762d4ce590324df813bd8c",
                                        "data": [{
                                                "CI001": {
                                                    "Category": "shirts",
                                                    "product_code": "CI001",
                                                    "status": "active"
                                                }
                                            }
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid data format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Data not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [{
                        "lang": "cURL",
                        "label": "cUrl",
                        "source": "curl --location --request GET 'https://api.catalogix.ai/v1/products/status?store_uuid=67762d4ce590324df813bd8c&offset=0&limit=100&status=active' \\\n--header 'apikey: apikey'"
                    }, {
                        "lang": "Python",
                        "label": "Python",
                        "source": "import requests\n\nurl = \"https://api.catalogix.ai/v1/products/status?store_uuid=67762d4ce590324df813bd8c&offset=0&limit=100&status=active\"\n\npayload={}\nheaders = {\n  'apikey': 'apikey'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
                    }, {
                        "lang": "JavaScript",
                        "label": "JavaScript",
                        "source": "var myHeaders = new Headers();\nmyHeaders.append(\"apikey\", \"apikey\");\n\nvar requestOptions = {\n  method: 'GET',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://api.catalogix.ai/v1/products/status?store_uuid=67762d4ce590324df813bd8c&offset=0&limit=100&status=active\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
                    }, {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://api.catalogix.ai/v1/products/status?store_uuid=67762d4ce590324df813bd8c&offset=0&limit=100&status=active',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'apikey: apikey'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
                    }, {
                        "lang": "Go",
                        "label": "Go",
                        "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.catalogix.ai/v1/products/status?store_uuid=67762d4ce590324df813bd8c&offset=0&limit=100&status=active\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"apikey\", \"apikey\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}"
                    }, {
                        "lang": "Java",
                        "label": "Java",
                        "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"https://api.catalogix.ai/v1/products/status?store_uuid=67762d4ce590324df813bd8c&offset=0&limit=100&status=active\")\n  .header(\"apikey\", \"apikey\")\n  .asString();\n"
                    }
                ]
            }
        },
        "/products/delete": {
            "delete": {
                "tags": [
                    "Product APIs"
                ],
                "summary": "Delete Product",
                "description": "Delete product data",
                "operationId": "delete_data_products_delete_delete",
                "parameters": [{
                        "name": "store_uuid",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Store Uuid"
                        },
                        "example": "67762d4ce590324df813bd8c"
                    }, {
                        "name": "sku_codes",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "List of SKU Codes needs to be deleted",
                            "title": "Sku Codes"
                        }
                    }, {
                        "name": "apikey",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Apikey"
                        },
                        "example": "Api key"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Data deletion successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteDataResponse"
                                },
                                "example": {
                                    "status": {
                                        "code": 0,
                                        "message": "success"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid data format",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Data not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ErrorResponseModel"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                },
                "x-codeSamples": [{
                        "lang": "cURL",
                        "label": "cUrl",
                        "source": "curl --location --request DELETE 'https://api.catalogix.ai/v1/products/delete?sku_codes=code&store_uuid=67762d4ce590324df813bd8c' \\\n--header 'apikey: apikey'"
                    }, {
                        "lang": "Python",
                        "label": "Python",
                        "source": "import requests\n\nurl = \"https://api.catalogix.ai/v1/products/delete?sku_codes=code&store_uuid=67762d4ce590324df813bd8c\"\n\npayload={}\nheaders = {\n  'apikey': 'apikey'\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n"
                    }, {
                        "lang": "JavaScript",
                        "label": "JavaScript",
                        "source": "var myHeaders = new Headers();\nmyHeaders.append(\"apikey\", \"apikey\");\n\nvar requestOptions = {\n  method: 'DELETE',\n  headers: myHeaders,\n  redirect: 'follow'\n};\n\nfetch(\"https://api.catalogix.ai/v1/products/delete?sku_codes=code&store_uuid=67762d4ce590324df813bd8c\", requestOptions)\n  .then(response => response.text())\n  .then(result => console.log(result))\n  .catch(error => console.log('error', error));"
                    }, {
                        "lang": "PHP",
                        "label": "PHP",
                        "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => 'https://api.catalogix.ai/v1/products/delete?sku_codes=code&store_uuid=67762d4ce590324df813bd8c',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'DELETE',\n  CURLOPT_HTTPHEADER => array(\n    'apikey: apikey'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n"
                    }, {
                        "lang": "Go",
                        "label": "Go",
                        "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"https://api.catalogix.ai/v1/products/delete?sku_codes=code&store_uuid=67762d4ce590324df813bd8c\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"apikey\", \"apikey\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}"
                    }, {
                        "lang": "Java",
                        "label": "Java",
                        "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.delete(\"https://api.catalogix.ai/v1/products/delete?sku_codes=code&store_uuid=67762d4ce590324df813bd8c\")\n  .header(\"apikey\", \"apikey\")\n  .asString();\n"
                    }
                ]
            }
        },
        "/rate-limit-info": {
            "get": {
                "tags": [
                    "API Information"
                ],
                "summary": "Rate Limiting Info",
                "description": "rate_limit: 20 requests per minute  \nExceeding this limit will result in a 429 Too Many Requests error.",
                "operationId": "rate_limit_info_rate_limit_info_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/stores": {
            "post": {
                "tags": [
                    "Store"
                ],
                "summary": "Create Store",
                "operationId": "store_v1_store_post",
                "parameters": [
                    {
                        "name": "workspace_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Workspace Id"
                        }
                    },
                    {
                        "name": "copy_taxonomy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean",
                            "default": false,
                            "title": "Copy Taxonomy"
                        }
                    },
                    {
                        "name": "linked_store_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Linked Store Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreCreateModel"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreCreateResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/stores/{store_uuid}": {
            "get": {
                "tags": [
                    "Store"
                ],
                "summary": "Retrieve Store Details",
                "operationId": "retrieve_store_info_v1_store__store_id__get",
                "parameters": [
                    {
                        "name": "apikey",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Apikey"
                        },
                        "example": "Api key"
                    },
                    {
                        "name": "store_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Store uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RetrieveStoreResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Store"
                ],
                "summary": "Update Store",
                "operationId": "store_v1_store__store_id__put",
                "parameters": [
                    {
                        "name": "apikey",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Apikey"
                        },
                        "example": "Api key"
                    },
                    {
                        "name": "store_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Store uuid"
                        }
                    },
                    {
                        "name": "workspace_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Workspace Id"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StoreUpdateModel"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StoreUpdateResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Store"
                ],
                "summary": "Delete Store",
                "operationId": "store_v1_store__store_id__delete",
                "parameters": [
                    {
                        "name": "apikey",
                        "in": "header",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Apikey"
                        },
                        "example": "Api key"
                    },
                    {
                        "name": "store_uuid",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Store uuid"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DeleteStoreResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/assets/upload": {
            "post": {
                "tags": [
                    "File Upload"
                ],
                "summary": "Create Asset",
                "operationId": "images_v1_asset_upload_post",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/AssetUploadModel"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssetUploadResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "DeleteDataResponse": {
                "properties": {
                    "status": {
                        "allOf": [{
                                "$ref": "#/components/schemas/StatusModel"
                            }
                        ],
                        "description": "Status of the operation, including code and message"
                    }
                },
                "type": "object",
                "required": [
                    "status"
                ],
                "title": "DeleteDataResponse"
            },
            "ErrorResponseModel": {
                "properties": {
                    "status": {
                        "type": "string",
                        "title": "Status",
                        "description": "The status of the request, typically 'error'",
                        "default": "error"
                    },
                    "detail": {
                        "type": "string",
                        "title": "Detail",
                        "description": "A description of the error"
                    }
                },
                "type": "object",
                "required": [
                    "detail"
                ],
                "title": "ErrorResponseModel"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "InsertData": {
                "properties": {
                    "store_uuid": {
                        "type": "string",
                        "title": "Store Uuid",
                        "description": "Unique identifier for the store",
                        "example": "67762d4ce590324df813bd8c"
                    },
                    "failed_products": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Failed Products",
                        "example": [{
                                "metadata": {
                                    "product_code": "CI001",
                                    "errors": ["Category"]
                                }
                            }
                        ]
                    },
					"successful_product_codes": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Successful Product Codes",
                        "example": ["CI001"]
                    },
                    "existing_product_codes": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Existing Product Codes",
                        "default": ["CI001"]
                    }
                },
                "type": "object",
                "required": [
                    "store_uuid"
                ],
                "title": "InsertData"
            },
            "InsertDataResponse": {
                "properties": {
                    "status": {
                        "allOf": [{
                                "$ref": "#/components/schemas/StatusModel"
                            }
                        ],
                        "description": "Status of the operation"
                    },
                    "data": {
                        "allOf": [{
                                "$ref": "#/components/schemas/InsertData"
                            }
                        ],
                        "description": "Information related to insertion of each products"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "data"
                ],
                "title": "InsertDataResponse"
            },
            "RetrieveDataModel": {
                "properties": {
                    "store_uuid": {
                        "type": "string",
                        "title": "Store Uuid",
                        "description": "Unique identifier for the store"
                    },
                    "marketplace": {
                        "type": "string",
                        "title": "Marketplace",
                        "description": "Name of the source marketplace data is retrieved from"
                    },
                    "data": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Data",
                        "description": "List of data entries associated with the SKUs",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "store_uuid",
                    "marketplace"
                ],
                "title": "RetrieveDataModel"
            },
            "RetrieveDataResponse": {
                "properties": {
                    "status": {
                        "allOf": [{
                                "$ref": "#/components/schemas/StatusModel"
                            }
                        ],
                        "description": "Status of the operation, including code and message"
                    },
                    "data": {
                        "allOf": [{
                                "$ref": "#/components/schemas/RetrieveDataModel"
                            }
                        ],
                        "description": "Data including store UUID, marketplace, and associated SKU data"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "data"
                ],
                "title": "RetrieveDataResponse"
            },
            "SkuDataModel": {
                "properties": {
                    "product_code": {
                        "type": "string",
                        "title": "product_code",
                        "description": "Unique identifier for the product",
                        "example": "CI001"
                    },
                    "parent_code": {
                        "type": "string",
                        "title": "parent_code",
                        "description": "product parent code",
                        "example": "CI001"
                    },
                    "Image URL 1": {
                        "type": "string",
                        "title": "Image Url 1",
                        "description": "Image URL 1",
                        "example": "https://assets-test.catalogix.ai/dee9c181338099b931cde78787df567a"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "new",
                            "active",
                            "problem",
                            "inactive",
                            "draft",
                            "under review"
                        ],
                        "title": "Status",
                        "example": "inactive"
                    }
                },
                "type": "object",
                "required": [
                    "product_code",
					"parent_code"
                ],
                "title": "SkuDataModel"
            },
            "StatusModel": {
                "properties": {
                    "code": {
                        "type": "integer",
                        "title": "Code",
                        "description": "Status code of the operation. 1 means success. -1 means failure. 0 means process moved to background",
                        "example": 0
                    },
                    "message": {
                        "type": "string",
                        "title": "Message",
                        "description": "Message describing the status",
                        "example": "success"
                    }
                },
                "type": "object",
                "required": [
                    "code",
                    "message"
                ],
                "title": "StatusModel"
            },
            "UpdateDataModel": {
                "properties": {
                    "store_uuid": {
                        "type": "string",
                        "title": "Store Uuid",
                        "description": "Unique identifier for the store",
                        "example": "67762d4ce590324df813bd8c"
                    },
                    "failed_products": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Response",
                        "description": "Response containing errors if any for product code is failed to update",
                        "example": [{
                                "metadata": {
                                    "product_code": "CI001",
                                    "errors": ["Status"]
                                }
                            }
                        ]
                    },
                    "updated_skus": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Updated products",
                        "description": "List of Products that were successfully updated",
                        "default": ["CI001"]
                    },
                    "unavailable_skus": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Unavailable products",
                        "description": "List of Products that were unavailable for update",
                        "default": ["CI00000000"]
                    }
                },
                "type": "object",
                "required": [
                    "store_uuid",
                    "response"
                ],
                "title": "UpdateDataModel"
            },
            "UpdateDataResponse": {
                "properties": {
                    "status": {
                        "allOf": [{
                                "$ref": "#/components/schemas/StatusModel"
                            }
                        ],
                        "description": "Status of the operation"
                    },
                    "data": {
                        "allOf": [{
                                "$ref": "#/components/schemas/UpdateDataModel"
                            }
                        ],
                        "description": "Data containing updated and unavailable SKUs"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "data"
                ],
                "title": "UpdateDataResponse"
            },
            "UpdateSkuDataModel": {
                "properties": {
                    "prouduct_code": {
                        "type": "string",
                        "title": "prouduct_code",
                        "description": "Unique identifier for the product. Cannot be updated",
                        "example": "CI001"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "new",
                            "active",
                            "problem",
                            "inactive",
                            "draft",
                            "under review"
                        ],
                        "title": "Status",
                        "example": "inactive"
                    }
                },
                "type": "object",
                "required": [
                    "product_code"
                ],
                "title": "UpdateSkuDataModel"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [{
                                    "type": "string"
                                }, {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            },
            "ChannelEnum": {
                "type": "string",
                "enum": [
                        "ajiob2c",
                        "amazon-vendor",
                        "flipkart_vendor",
                        "firstcry",
                        "ajio_offline",
                        "limeroad",
                        "flipkart_b2b",
                        "tatacliq",
                        "fynd",
                        "ajiob2b",
                        "trell",
                        "myntra_b2b",
                        "snapdeal",
                        "meesho",
                        "dealshare",
                        "myntra",
                        "jiomart",
                        "bewakoof",
                        "nykaa",
                        "tatacliq-vendor",
                        "levis",
                        "flipkart",
                        "amazon",
                        "ajio-vendor",
                        "shopsy",
                        "shoppers_stop",
                        "amazon_home_and_kitchen",
                        "nnnow",
                        "magento",
                        "inorbit",
                        "myntra-OR",
                        "amazon-seller",
                        "megamart",
                        "eshopbox",
                        "shopify",
                        "facebook",
                        "SMP",
                        "google"
                    ],
                "title": "ChannelEnum"
            },
            "DefaultAutomation": {
                "type": "string",
                "enum": [
                    "color_distribution",
                    "analyze_attribute",
                    "analyze_image",
                    "mask_computation",
                    "product_listing_audit",
                    "image_automation",
                    "bulk_actions",
                    "uniqueness_checker",
                    "product_quality_score",
                    "detail_shot_generator",
                    "infographic_creator",
                    "video_generation",
                    "size_chart_creator",
                    "data_sync_to_external",
                    "delete_product_images",
                    "bulk_edit",
                    "data_export",
                    "text_classifier",
                    "optical_character_recognition",
                    "image_classifier",
                    "image_classifier_express",
                    "image_classifier_precise",
                    "conditional_attribution",
                    "product_description",
                    "product_title_generation",
                    "SEO_Automations",
                    "swatch_generation",
                    "image_type",
                    "image_upload",
                    "bulk_image_upload",
                    "hotspot_generation",
                    "unique_content_generator",
                    "master_automation",
                    "multimedia_visibility",
                    "background_removal",
                    "face_swap",
                    "service-1",
                    "service-2",
                    "service-3",
                    "service-4",
                    "service-5",
                    "metadata_translation",
                    "image_translation",
                    "update_availability",
                    "smp_upgrade",
                    "SMP_image_upsert"
                ],
                "title": "DefaultAutomation"
            },
            "RegionEnum": {
                "type": "string",
                "enum": [
                    "India",
                    "Africa",
                    "Asia",
                    "Europe",
                    "Global",
                    "Middle East",
                    "North America",
                    "Oceania",
                    "South America"
                ],
                "title": "RegionEnum"
            },
            "StoreCreateModel": {
                "properties": {
                    "store_name": {
                        "type": "string",
                        "title": "Store Name"
                    },
                    "store_taxonomy": {
                        "type": "string",
                        "enum": [
                            "catalogix",
                            "brand"
                        ],
                        "title": "Store Taxonomy"
                    },
                    "store_website": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Store Website"
                    },
                    "region": {
                        "items": {
                            "$ref": "#/components/schemas/RegionEnum"
                        },
                        "type": "array",
                        "title": "Region"
                    },
                    "channels": {
                        "items": {
                            "$ref": "#/components/schemas/ChannelEnum"
                        },
                        "type": "array",
                        "title": "Channels"
                    },
                    "default_automation": {
                        "items": {
                            "$ref": "#/components/schemas/DefaultAutomation"
                        },
                        "type": "array",
                        "title": "Default Automation"
                    }
                },
                "type": "object",
                "required": [
                    "store_name",
                    "store_taxonomy",
                    "region",
                    "channels",
                    "default_automation"
                ],
                "title": "StoreCreateSchema",
                "example": {
                    "channels": [
                        "ajiob2c",
                        "SMP"
                    ],
                    "default_automation": [
                        "analyze_image"
                    ],
                    "region": [
                        "India",
                        "Africa"
                    ],
                    "store_name": "sample store",
                    "store_taxonomy": "catalogix",
                    "store_website": "https://test.com"
                }
            },
            "StoreUpdateModel": {
                "properties": {
                    "store_name": {
                        "type": "string",
                        "title": "Store Name"
                    },
                    "store_website": {
                        "type": "string",
                        "title": "Store Website"
                    },
                    "region": {
                        "items": {
                            "$ref": "#/components/schemas/RegionEnum"
                        },
                        "type": "array",
                        "title": "Region"
                    },
                    "channels": {
                        "items": {
                            "$ref": "#/components/schemas/ChannelEnum"
                        },
                        "type": "array",
                        "title": "Channels"
                    },
                    "default_automation": {
                        "items": {
                            "$ref": "#/components/schemas/DefaultAutomation"
                        },
                        "type": "array",
                        "title": "Default Automation"
                    }
                },
                "type": "object",
                "required": [
                    "store_name",
                    "store_website",
                    "region",
                    "channels",
                    "default_automation"
                ],
                "title": "StoreUpdatePayload",
                "example": {
                    "channels": [
                        "ajiob2c",
                        "SMP"
                    ],
                    "default_automation": [],
                    "region": [
                        "India",
                        "Africa"
                    ],
                    "store_name": "sample store",
                    "store_website": "https://test.com"
                }
            },
            "StoreCreateResponse": {
                "properties": {
                    "status": {
                        "allOf": [{
                                "$ref": "#/components/schemas/StatusModel"
                            }
                        ],
                        "description": "Status of the operation"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "data"
                ],
                "title": "StoreCreateResponse"
            },
            "StoreUpdateResponse": {
                "properties": {
                    "status": {
                        "allOf": [{
                                "$ref": "#/components/schemas/StatusModel"
                            }
                        ],
                        "description": "Status of the operation"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "data"
                ],
                "title": "StoreUpdateResponse"
            },
            "RetrieveStoreModel": {
                "properties": {
                    "data": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Store",
                        "description": "List information of the store",
                        "default": []
                    }
                },
                "type": "object",
                "required": [
                    "store_uuid"
                ],
                "title": "RetrieveStoreModel"
            },
            "RetrieveStoreResponse": {
                "properties": {
                    "status": {
                        "allOf": [{
                                "$ref": "#/components/schemas/StatusModel"
                            }
                        ],
                        "description": "Status of the operation, including code and message"
                    },
                    "data": {
                        "allOf": [{
                                "$ref": "#/components/schemas/RetrieveStoreModel"
                            }
                        ],
                        "description": "store UUID, marketplace, and associated store info"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "data"
                ],
                "title": "RetrieveStoreResponse"
            },
            "DeleteStoreResponse": {
                "properties": {
                    "status": {
                        "allOf": [{
                                "$ref": "#/components/schemas/StatusModel"
                            }
                        ],
                        "description": "Status of the operation, including code and message"
                    }
                },
                "type": "object",
                "required": [
                    "status"
                ],
                "title": "DeleteStoreResponse"
            },
            "AssetUploadModel": {
                "properties": {
                    "file": {
                        "type": "string",
                        "format": "binary",
                        "title": "File"
                    }
                },
                "type": "object",
                "required": [
                    "file"
                ],
                "title": "Body_images_v1_asset_upload_post"
            },
            "AssetUploadResponse": {
                "properties": {
                    "status": {
                        "allOf": [{
                                "$ref": "#/components/schemas/StatusModel"
                            }
                        ],
                        "description": "Status of the operation"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "data"
                ],
                "title": "AssetUploadResponse"
            }
        }
    }
}
